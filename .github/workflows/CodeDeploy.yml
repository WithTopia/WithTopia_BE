# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches:
      - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  DOCKER_IMG_FULL_NAME: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
#  COMMIT_NUM: ${GITHUB_SHA::7}
#  AWS_REGION: ap-northeast-2
#  S3_BUCKET_NAME: hanghae99-wonyoung
#  CODE_DEPLOY_APPLICATION_NAME: git_action_wonyoung
#  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: git_action_wonyoung


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # properties 설정 파일 쓰기
      - name: make application.properties
        run: |
          echo ">> mkdir & touch"
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.properties
          echo ">> copy application.properties"
          echo "${{ secrets.APLICATION_PROPERTIES }}" >> ./application.properties

      # 권한 재설정
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      ## gradle build
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
#      - name: Build with Gradle
#        run: ./gradlew bootJar

        #      # (3) Gradle build (Test 제외)
        #      - name: Build with Gradle
        #        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        #        with:
        #          arguments: clean build -x test

        #    # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
        #    - name: Configure AWS credentials
        #      uses: aws-actions/configure-aws-credentials@v1
        #      with:
        #        aws-access-key-id: ${{ secrets.ACCESS_KEY }}
        #        aws-secret-access-key: ${{ secrets.SECRET_KEY }}
        #        aws-region: ${{ env.AWS_REGION }}
        #
        #    # (5) 빌드 결과물을 S3 버킷에 업로드
        #    - name: Upload to AWS S3
        #      run: |
        #        aws deploy push \
        #          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
        #          --ignore-hidden-files \
        #          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
        #          --source .
        #    # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
        #    - name: Deploy to AWS EC2 from S3
        #      run: |
        #        aws deploy create-deployment \
        #          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
        #          --deployment-config-name CodeDeployDefault.AllAtOnce \
        #          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
        #          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
        ## 웹 이미지 빌드 및 도커허브에 push

      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -t $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7} .
          docker push $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}

        ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA,DOCKER_IMG_FULL_NAME
          script: |
            docker stop ${{ secrets.DOCKER_USERNAME }}
            docker rm ${{ secrets.DOCKER_USERNAME }}
            yes | docker image prune -a
            docker pull $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7} 
            nohup docker run -d -p 8080:8080 --name ${{ secrets.DOCKER_USERNAME }} $DOCKER_IMG_FULL_NAME:${GITHUB_SHA::7}
            echo "server on....."